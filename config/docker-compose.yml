version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-setup:
    image: wurstmeister/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
      sleep 10 &&
      kafka-topics.sh --create --topic stock-data --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1 ||
      echo 'Topic already exists'"
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"

  kafka-consumer:
    build:
      context: ..
      dockerfile: docker/Dockerfile-consumer
    container_name: kafka-consumer
    env_file:
      - ../.env
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_started
      redis:
        condition: service_started  
  stock-fetcher:
    build:
      context: ..
      dockerfile: docker/Dockerfile-fetcher
    container_name: stock-fetcher
    env_file:
      - ../.env
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  pgdata:
