services:
# Zookeeper
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    networks:
      - stock-tracker-network

# Kafka
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR}
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "${KAFKA_BROKER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9092:9092" 
    networks:
      - stock-tracker-network

# ksqlDB Server (Process Kafka Data)
  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    container_name: ksqldb-server
    restart: always
    environment:
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_HEAP_OPTS: "-Xmx2g -Xms1g"
    ports:
      - "8088:8088"
    volumes:
      - type: bind
        source: ./ksql-statements.sql
        target: /config/ksql-statements.sql
    depends_on:
      - kafka
    networks:
      - stock-tracker-network

# ksqlDB CLI (for running queries)
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    volumes:
    - type: bind
      source: ./ksql-statements.sql
      target: /config/ksql-statements.sql
    entrypoint: /bin/sh
    tty: true
    networks:
      - stock-tracker-network

# Kafka Consumer (Reads OHLC Aggregated Data)
  kafka-consumer:
    build:
      context: ..
      dockerfile: docker/Dockerfile-consumer
    container_name: kafka-consumer
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started  
      timescaledb:
        condition: service_healthy
    networks:
      - stock-tracker-network

# Redis
  redis:
    image: redis:latest
    container_name: redis
    networks:
      - stock-tracker-network

# TimescaleDB (Stores Aggregated OHLC Data)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - stock-tracker-network

# Stock Fetcher (Sends Real-time Trades to Kafka)
  stock-fetcher:
    build:
      context: ..
      dockerfile: docker/Dockerfile-fetcher
    container_name: stock-fetcher
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - stock-tracker-network
      - internet-access

volumes:
  pgdata:

networks:
  stock-tracker-network:
    name: stock-tracker-network
    driver: bridge
  internet-access:
    name: internet-access
    driver: bridge
